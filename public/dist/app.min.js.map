{"version":3,"sources":["app.js"],"names":["socket","io","getElementById","messages","document","form","usernameInput","addEventListener","e","preventDefault","username","value","message","messageInput","emit","messageElement","classList","toLocaleTimeString","innerHTML","createElement","data","appendChild","concat","time","scrollTop","joinMessage","add","leaveMessage","on","userList","userItem","user","users","forEach","innerText"],"mappings":"aAAA,IAAMA,OAASC,KAATD,KAASC,SAAOC,eAAA,aAGhBC,SAAWC,SAASF,eAAe,YADnCG,cAAgBH,SAAAA,eAAT,YACPC,aAAWC,SAASF,eAAe,WACnCI,SAAaF,SAAGA,eAASF,aAK/BG,KAAKE,iBAAiB,SAAU,SAACC,GAAjCH,EAAII,iBAGF,IAAMC,EAAWJ,cAAcK,MACzBC,EAAUC,aAAaF,MAEzBD,GAAYE,IACdZ,OAAOc,KAAK,cAAe,CACzBJ,SAAUA,EACVE,QAASA,IAKZC,aAAAF,MAAA,MAMDX,OAAMe,GAAAA,iBAAiBX,SAAAA,GACvBW,IAAAA,GAAAA,IAAeC,MAAfC,qBACAF,EAAeG,SAAfC,cAAsCC,OACtCjB,EAASkB,UAAYN,IAAAA,QADrBA,EAAeG,UAAf,WAAAI,OAAsCF,EAAKV,SAA3C,eAAAY,OAAiEC,EAAjE,OAAAD,OAA2EF,EAAKR,SAIhFT,SAASqB,YAAYrB,GAIvBH,SAAUwB,UAAYrB,SAACO,eAIrBP,OAAAA,GAAQ,WAAR,SAAqBsB,GAJvB,IAAAA,EAAArB,SAAAe,cAAA,OAOAnB,EAAUgB,UAAaU,IAAA,UACrBD,EAAME,UAAN,GAAAL,OAA6BZ,EAA7B,oBACAiB,SAAAA,YAAaX,KAGdhB,OAED4B,GAAA,YAAA,SAAAlB,GANE,IAAMiB,EAAevB,SAASe,cAAc,OAO9CnB,EAAUgB,UAAeU,IAAA,UACvBG,EAASX,UAATW,GAAAA,OAAyBnB,EAAzBmB,kBALA1B,SAASkB,YAAYM,KASnBG,OAAAA,GAAAA,cAAqBC,SAAAA,GACrBF,SAAAA,UAASR,GACVW,EALDC,QAAA,SAAAF,GAFF,IAAAD,EAAA1B,SAAAe,cAAA,MAIIW,EAASd,UAAUU,IAAI,UACvBI,EAASI,UAAYH,EACrBF,SAASR,YAAYS","file":"app.min.js","sourcesContent":["const socket = io();  // Connect to the Socket.IO server\r\n\r\nconst form = document.getElementById('chat-form');\r\nconst messages = document.getElementById('messages');\r\nconst usernameInput = document.getElementById('username');\r\nconst messageInput = document.getElementById('message');\r\nconst userList = document.getElementById('user-list');\r\n\r\n// Handle form submission\r\nform.addEventListener('submit', (e) => {\r\n  e.preventDefault();\r\n\r\n  const username = usernameInput.value;\r\n  const message = messageInput.value;\r\n\r\n  if (username && message) {\r\n    socket.emit('sendMessage', {\r\n      username: username,\r\n      message: message,\r\n    });\r\n\r\n    // Clear the input field after sending the message\r\n    messageInput.value = '';\r\n  }\r\n});\r\n\r\n// Listen for incoming messages\r\nsocket.on('receiveMessage', (data) => {\r\n  const time = new Date().toLocaleTimeString();\r\n  const messageElement = document.createElement('div');\r\n  messageElement.classList.add('user');\r\n  messageElement.innerHTML = `<strong>${data.username}</strong> [${time}]: ${data.message}`;\r\n  messages.appendChild(messageElement);\r\n\r\n  // Scroll to the bottom of the messages\r\n  messages.scrollTop = messages.scrollHeight;\r\n});\r\n\r\n// Listen for user join/leave events\r\nsocket.on('userJoin', (username) => {\r\n  const joinMessage = document.createElement('div');\r\n  joinMessage.classList.add('system');\r\n  joinMessage.innerHTML = `${username} joined the chat`;\r\n  messages.appendChild(joinMessage);\r\n});\r\n\r\nsocket.on('userLeave', (username) => {\r\n  const leaveMessage = document.createElement('div');\r\n  leaveMessage.classList.add('system');\r\n  leaveMessage.innerHTML = `${username} left the chat`;\r\n  messages.appendChild(leaveMessage);\r\n});\r\n\r\n// Listen for active users\r\nsocket.on('updateUsers', (users) => {\r\n  userList.innerHTML = ''; // Clear the list\r\n  users.forEach((user) => {\r\n    const userItem = document.createElement('li');\r\n    userItem.classList.add('active');\r\n    userItem.innerText = user;\r\n    userList.appendChild(userItem);\r\n  });\r\n});\r\n"]}